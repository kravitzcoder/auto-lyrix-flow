name: AutoLyrixAlign Processing

on:
  workflow_dispatch:
    inputs:
      audio_file_info:
        description: 'Audio file metadata (JSON)'
        required: true
        type: string
        default: '{"filename": "test.mp3", "size": 5000000, "type": "audio/mpeg"}'
      lyrics_text:
        description: 'Lyrics text content'
        required: true
        type: string
        default: 'Sample lyrics line 1\nSample lyrics line 2\nSample lyrics line 3'
      format:
        description: 'Output format'
        required: false
        default: 'lrc'
        type: choice
        options:
          - lrc
          - json
          - srt
      job_id:
        description: 'Job ID for tracking'
        required: false
        type: string
        default: 'manual-test'

  repository_dispatch:
    types: [align-lyrics]

jobs:
  align-lyrics:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          
      - name: Create directories
        run: |
          mkdir -p output
          mkdir -p temp
          
      - name: Save inputs to files
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo '${{ github.event.inputs.audio_file_info }}' > temp/audio_info.json
            echo "${{ github.event.inputs.format }}" > temp/format.txt
            echo "${{ github.event.inputs.job_id }}" > temp/job_id.txt
            cat > temp/lyrics.txt << 'LYRICS_EOF'
          ${{ github.event.inputs.lyrics_text }}
          LYRICS_EOF
          else
            echo '${{ github.event.client_payload.audio_file_info }}' > temp/audio_info.json
            echo "${{ github.event.client_payload.format }}" > temp/format.txt
            echo "${{ github.event.client_payload.job_id }}" > temp/job_id.txt
            cat > temp/lyrics.txt << 'LYRICS_EOF'
          ${{ github.event.client_payload.lyrics_text }}
          LYRICS_EOF
          fi
          
      - name: Create processing script
        run: |
          cat > process_alignment.py << 'SCRIPT_EOF'
          import os
          import json
          from datetime import datetime
          from pathlib import Path
          
          def create_demo_lrc(lyrics_text, job_id, filename):
              lines = lyrics_text.strip().split('\n')
              lrc_content = []
              
              lrc_content.append(f"[ar:Demo Artist]")
              lrc_content.append(f"[ti:Demo Song - {filename}]")
              lrc_content.append(f"[al:AutoLyrixAlign Demo]")
              lrc_content.append(f"[by:AutoLyrixAlign v1.0]")
              lrc_content.append(f"[offset:0]")
              lrc_content.append("")
              
              current_time = 0
              for i, line in enumerate(lines[:20]):
                  if line.strip():
                      minutes = current_time // 60
                      seconds = current_time % 60
                      timestamp = f"[{minutes:02d}:{seconds:05.2f}]"
                      lrc_content.append(f"{timestamp}{line.strip()}")
                      current_time += 3
              
              return "\n".join(lrc_content)
          
          def create_demo_json(lyrics_text, job_id, filename):
              words = lyrics_text.split()[:50]
              word_timings = []
              
              current_time = 0.0
              for word in words:
                  word_timings.append({
                      "word": word,
                      "start": current_time,
                      "end": current_time + 0.5,
                      "confidence": 0.95
                  })
                  current_time += 0.6
              
              return {
                  "job_id": job_id,
                  "filename": filename,
                  "demo_mode": True,
                  "word_count": len(words),
                  "duration": current_time,
                  "words": word_timings,
                  "metadata": {
                      "processed_at": datetime.now().isoformat(),
                      "model_version": "demo-v1.0",
                      "note": "This is demo output. In production, real AI alignment would be performed."
                  }
              }
          
          # Read input files
          with open('temp/audio_info.json', 'r', encoding='utf-8') as f:
              audio_info = f.read().strip()
              
          with open('temp/lyrics.txt', 'r', encoding='utf-8') as f:
              lyrics_text = f.read().strip()
              
          with open('temp/format.txt', 'r', encoding='utf-8') as f:
              output_format = f.read().strip()
              
          with open('temp/job_id.txt', 'r', encoding='utf-8') as f:
              job_id = f.read().strip()
          
          print(f"🎵 Processing Job ID: {job_id}")
          print(f"📄 Lyrics length: {len(lyrics_text)} characters")
          print(f"🎯 Output format: {output_format}")
          
          # Parse audio info
          try:
              audio_data = json.loads(audio_info)
              audio_filename = audio_data.get('filename', 'demo-audio')
          except:
              audio_filename = 'demo-audio'
          
          # Generate output
          base_filename = f"aligned_{job_id}"
          
          if output_format == 'lrc':
              content = create_demo_lrc(lyrics_text, job_id, audio_filename)
              output_file = f"output/{base_filename}.lrc"
              
          elif output_format == 'json':
              content = json.dumps(create_demo_json(lyrics_text, job_id, audio_filename), indent=2)
              output_file = f"output/{base_filename}.json"
              
          else:  # srt
              lines = lyrics_text.strip().split('\n')[:10]
              srt_content = []
              current_time = 0
              
              for i, line in enumerate(lines, 1):
                  if line.strip():
                      start_time = f"00:{current_time//60:02d}:{current_time%60:02d},000"
                      end_time = f"00:{(current_time+3)//60:02d}:{(current_time+3)%60:02d},000"
                      srt_content.extend([str(i), f"{start_time} --> {end_time}", line.strip(), ""])
                      current_time += 3
              
              content = "\n".join(srt_content)
              output_file = f"output/{base_filename}.srt"
          
          # Write output file
          with open(output_file, 'w', encoding='utf-8') as f:
              f.write(content)
              
          print(f"✅ Generated: {output_file}")
          
          # Create metadata
          metadata = {
              "job_id": job_id,
              "audio_filename": audio_filename,
              "output_format": output_format,
              "output_file": output_file,
              "lyrics_length": len(lyrics_text),
              "processed_at": datetime.now().isoformat(),
              "demo_mode": True,
              "status": "completed"
          }
          
          metadata_file = f"output/{base_filename}_metadata.json"
          with open(metadata_file, 'w', encoding='utf-8') as f:
              json.dump(metadata, f, indent=2)
              
          print(f"📊 Metadata: {metadata_file}")
          print("🎉 Demo processing completed successfully!")
          SCRIPT_EOF
          
      - name: Run alignment processing
        run: python process_alignment.py
          
      - name: List output files
        run: |
          echo "=== Generated Output Files ==="
          ls -la output/
          echo ""
          echo "=== Sample Output ==="
          for file in output/*.lrc output/*.json output/*.srt; do
            if [ -f "$file" ]; then
              echo "--- $file ---"
              head -10 "$file"
              echo ""
            fi
          done
          
      - name: Upload results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: aligned-lyrics-${{ github.event.client_payload.job_id || github.event.inputs.job_id || 'manual' }}
          path: output/
          retention-days: 7
          
      - name: Summary
        run: |
          echo "=== Processing Summary ==="
          echo "✅ Job completed successfully"
          echo "📁 Check the 'Artifacts' section above to download results"
          echo "🔗 Job ID: ${{ github.event.client_payload.job_id || github.event.inputs.job_id || 'manual' }}"
          echo "📊 Files generated: $(ls -1 output/ | wc -l)"
          echo "💡 This is a demo version - in production, real AI alignment would be performed"
